//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit2.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
/**************CADENAS***************/

/*Escribir una funcion que devuelva la cantidad de digitos
  pares que estan inmediaamente antes de uno impar
  Ej. CantDigPares(3827435)== 2*/

  byte  CantDigPares (Cardinal n)
{  byte r;
   if (n<10){
	r=0;
   } else {  // asumimos que hay mas de 2 digitos
	   r=CantDigPares (n/10);
	   byte izq = (n/10) % 10;
	   byte der = (n%10);
	   if ((izq % 2==0) && (der % 2==1)){
			r = r +1 ;
	   }
   }
   return r;

}

void __fastcall TForm1::CantDigParesDif1Click(TObject *Sender)
{
    Edit2->Text=CantDigPares(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

/*Escribir una funcion que muestre la cantidad de digitos
  pares que estan inmediaamente antes de uno impar
  Ej. GetDigPares(3827435)== 2,4*/

Cardinal GetDigPares(Cardinal n){
	Cardinal r;
	if(n<10){
		r=0;
	}else{
		r=GetDigPares(n/10);
		byte izq=(n/10)%10;
		byte der=(n%10);
		if ((izq%2==0)&&(der%2==1)){
			r=r*10+izq;
		}
	}
	return r;
}

void __fastcall TForm1::GetDigPares1Click(TObject *Sender)
{
	Edit2->Text=GetDigPares(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

//Ej. MayorMenor(23164) --> 61

byte MayorMenor(Cardinal n)
{ 	byte a, b;
	if (n<10) {
		a=b=n;
	} else {
		byte p=MayorMenor(n/10);
		b=p%10;
		a=p/10;
		if(n%10>a){
			a=n%10;
		}
		if(n%10<b){
			b=n%10;
		}
	}
	return a * 10 + b;
}

void __fastcall TForm1::GetDigPares2Click(TObject *Sender)
{
	Edit2->Text=MayorMenor(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

//Ej. MayorMenor(23164) --> 61, solo que me muestra en diferente Edit

void mayorMenor2(Cardinal n, byte &may, byte &men)
{ 	byte a, b;
	if (n < 10) { //n = 1
		may = n;
		men = n;
	} else {
		mayorMenor2(n / 10, may, men);
		if ((n % 10) > may) {
			may = n %10;
		}
		if ((n %10) < men) {
			men = n %10;
		}
	}
}

void __fastcall TForm1::MayorMenor21Click(TObject *Sender)
{
	byte may, men;
	mayorMenor2(StrToInt(Edit1->Text),may,men);
	Edit2->Text=may;
	Edit3->Text=men;
}
//---------------------------------------------------------------------------

/*Escribir un proceso para eliminar el primer numero de una cadena
  Ej. x="Hola45como46estas" -> "Holacomo46estas"*/

bool EsDigito(char c)
{
  return (c>='0') && (c<='9');
}

void EliminarPrimerNumero(AnsiString &x)
{ if (x != "") {
	char c = x[1];
	x.Delete(1,1);
	if (!EsDigito(c)) {
		EliminarPrimerNumero(x);
		x = (AnsiString)c + x;
	} else {
	   if ((x != "") && (EsDigito(x[1]))) {
	   EliminarPrimerNumero(x);
	   }
	}

  }
}

void __fastcall TForm1::ElimPrimNum1Click(TObject *Sender)
{
	AnsiString cadena=Edit1->Text;
	EliminarPrimerNumero(cadena);
	Edit2->Text=cadena;
}
//---------------------------------------------------------------------------

/*Escribir una funcion que devuelva la palabra mas larga de una cadena
  Ej. CadenaMasLarga("Esta es una prueba mas") -> "prueba"*/

String PalabraMasLarga(String x )
{
  String PalabraLarga;
  x = x.Trim();
  byte n = x.Length();
  if (n == 0) {
	PalabraLarga = "";
  } else {
	byte p = x.LastDelimiter(' ');
	String UltimaPalabra = x.SubString(p+1, n-p);
	//ShowMessage(UltimaPalabra);
	x.SetLength(p - 1);
	PalabraLarga = PalabraMasLarga(x);
	if (UltimaPalabra.Length() > PalabraLarga.Length()) {
		PalabraLarga = UltimaPalabra;
	}
  }
  return PalabraLarga;
}

void __fastcall TForm1::PalMasLarga1Click(TObject *Sender)
{
	String cadena = Edit1->Text;
	Edit2->Text = PalabraMasLarga(cadena);
}
//---------------------------------------------------------------------------

/*Escribir un proceso que lleve el menor de los digitos al inicio
  de un numero Ej. x=382731 -> x=138273*/

void MoverMenor(Cardinal &x)
{ if (x>9){
	byte d=x%10;
	x=x/10;
	if((x%10)>d){
	  byte aux=d;
	  d=x%10;
	  x=(x/10)*10+aux;
	}
	MoverMenor(x);
	x=x*10+d;
  }

}

void MoverMenor(Cardinal &n, Cardinal m)
{
   n=100;
   m=200;
}

void __fastcall TForm1::MoverMenor1Click(TObject *Sender)
{
    Cardinal n=StrToInt(Edit1->Text);
	MoverMenor(n);
	Edit2->Text=n;
}
//---------------------------------------------------------------------------

/*Escribir una funcion que devuelva una cadena formada por los
  digitos de un numero repetidos la cantidad de veces que el
  digito representa, max 2 funciones.
  Ej. CadDeDig(5021)->"55555221"*/

String CadDeDig(Cardinal n)
{
	String s;
	if(n==0){
	  s="";
	}else{
	   s=CadDeDig(n/10);
	   if (n%10>0){
		 Cardinal p=(n%10)*((pow10(n%10)-1)/9);
		 s=s+p;
	   }
	}
	return s;
}

void __fastcall TForm1::CadenaDeDig1Click(TObject *Sender)
{
	Cardinal n=StrToInt(Edit1->Text);
	Edit2->Text=CadDeDig(n);
}
//---------------------------------------------------------------------------

/*Escribir una funcion que sume los numeros de una cadena
  Ej. SumaNumeros("20Hola 10Como")->30*/

bool  EsDigito(wchar_t x)
{
   String nro="0123456789";
   return nro.Pos(x)>0;
}

String UltimoNro(String cad)
{
   String r;
   if (cad==""){
	  r="";
   }else{
	   wchar_t x=cad[cad.Length()];
	   cad.SetLength(cad.Length()-1);
	   if (!EsDigito(x)){
		 r=UltimoNro(cad);
	   }else{
		   if ((cad!="")&&EsDigito(cad[cad.Length()])){
			  r=UltimoNro(cad)+ String(x);
		   }else{
			   r=(String)x;
		   }
	   }
   }
   return r;
}

Cardinal SumaNumeros(String cad)
{
	Cardinal nro;
	if (cad==""){
	  nro=0;
	}else{
		String ultNro=UltimoNro(cad);
		if (ultNro==""){
		  nro=0;
		}else{
			byte p=cad.LastDelimiter(ultNro);
			cad.SetLength(p-ultNro.Length()-1);
			nro=StrToInt(ultNro)+SumaNumeros(cad);
		}
	}
	return nro;
}

void __fastcall TForm1::SumaNum1Click(TObject *Sender)
{
	Edit2->Text=SumaNumeros(Edit1->Text);
}
//---------------------------------------------------------------------------

//Ej: x=123456 --> 135

void ElimPares (Cardinal &n)
{   if (n < 10){
		if (n%2 == 0)
		 n=0;
	}else{
		byte d;
		d = n%10;
		n = n/10;
		ElimPares(n);
		if (d%2==1)
			n = n*10+d;
	}
}
void __fastcall TForm1::ElimPares1Click(TObject *Sender)
{
	Cardinal a=StrToInt(Edit1->Text);
	ElimPares(a);
	Edit2->Text=a;
}
//---------------------------------------------------------------------------

/*Funcion o proceso que cuente la cantidad qeu signos que hay despues de una
  palabra. Ej. ContadorConSignos(hola@comoestas*pero#)->3*/

Byte ContadorDeSignos (AnsiString &x){
	byte r;
	x=x.Trim();
	Byte c=x.LastDelimiter("~!@#$%^&*()_+1 234567890");
	Byte L=x.LastDelimiter("QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm");
	Byte len=x.Length();
	if (x!="") {
		if (isalpha(x[x.Length()])) {
			x.Delete(c+1,len-c+1);
			r=ContadorDeSignos (x);
			r++;
		}else{
			x.Delete(L+1,len-L+1);
			r=ContadorDeSignos (x);
		}
	}else{
		r=0;
	}
return r;
}

void __fastcall TForm1::ContadorDeSignos1Click(TObject *Sender)
{
    AnsiString x=Edit1->Text;
	Edit2->Text=ContadorDeSignos (x);
}
//---------------------------------------------------------------------------

/*Proceso para eliminar el ultimo numero de una cadena
  Ej. x("Hola45como46estas") -> "Hola45comoestas"*/

void ElimUltNum (AnsiString &x)
{
	byte n=x.Length();
	if(x!=""){
	  char c=x[n];
	  x.Delete(n,1);
	  if(!EsDigito(c)){
		ElimUltNum(x);
		x=x+AnsiString(c);
	  }else{
		if((x!="")&&(EsDigito(x[n-1])))
		  ElimUltNum(x);
	  }
	}
}

void __fastcall TForm1::ElimUltNum1Click(TObject *Sender)
{
    AnsiString x= Edit1->Text;
	ElimUltNum(x);
	Edit2->Text=x;
}
//---------------------------------------------------------------------------

