//---------------------------------------------------------------------------

#pragma hdrstop

#include "Vectores.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

// Algoritmo que devuelve la suma de los elementos de un vector
// Ejemplo: v[1,2,3,4,5] ==> 15

Cardinal Suma(TStringGrid *v, Word n) {
	Cardinal suma;
	if (n == 0) {
		suma = 0;
	} else {
		suma = Suma(v, n - 1);
		suma = suma + StrToInt(v->Cells[n - 1][0]);
    }
	return suma;
}
// ---------------------------------------------------------------------------
// Algoritmo que devuelve la suma de los elementos pares de un vector
// Ejemplo: v[1,2,3,4,5] ==> 6

Cardinal SumaPares(TStringGrid *v, Word n){
	Cardinal suma;
	if (n == 0) {
		suma = 0;
	} else if (n == 1) {
		byte num = StrToInt(v->Cells[0][0]);
		if (num % 2 == 0) {
			suma = num;
		} else {
			suma = 0;
        }
	} else {
		suma = SumaPares(v, n - 1);
		byte ult = StrToInt(v->Cells[n - 1][0]);
		if (ult % 2 == 0) {
			suma = suma + ult;
		}
    }
	return suma;
}
// ---------------------------------------------------------------------------
// Algoritmo que devuelve la suma de los elementos pares de un vector
// Ejemplo: v[1,2,3,4,5] ==> 9

Cardinal SumaImpares(TStringGrid *v, Word n) {
	Cardinal suma;
	if (n == 0) {
		suma = 0;
	} else if (n == 1) {
		suma = StrToInt(v->Cells[0][0]);
		if (suma % 2 == 0) {
			suma = 0;
		}
	} else {
		suma = SumaImpares(v, n - 1);
		byte ult = StrToInt(v->Cells[n - 1][0]);
		if (ult % 2 != 0) {
			suma = suma + ult;
        }
    }
	return suma;
}
// ---------------------------------------------------------------------------
// Algoritmo que verifica si un elemento esta en el vector
// Ejemplo: v[2, 21, 34, 55, 8]; x = 34 ==> true

bool ExisteElemento(TStringGrid *v, Word a, Word b, Word elemento) {
	bool result;
	Word n = b - a + 1;
	if (n == 0) {
		result = false;
	} else if (n == 1) {
		Word num = StrToInt(v->Cells[a][0]);
		if (num == elemento) {
			result = true;
		} else {
			result = false;
        }
	} else {
		result = ExisteElemento(v, a, b - 1,elemento);
		Word ult = StrToInt(v->Cells[b - 1][0]);
		if (ult == elemento) {
			result = true;
        }
    }
	return result;
}
// ---------------------------------------------------------------------------
// Algoritmo que devuelve un vector cargado con las vocales de
// cada palabra de una cadena
// Ejemplo: x = "Buenos dias a todos" ==> v[ueo, ia, a, oo,]

AnsiString Vocales(AnsiString cadena) {
	AnsiString vocales;
	AnsiString alf = "aeiouAEIOUáéíóúÁÉÍÓÚüÜ";
	if (cadena.IsEmpty()) {
		vocales = "";
	} else {
		char z = cadena[1];
		cadena.Delete(1, 1);
		byte pos = alf.Pos(z);
		vocales = Vocales(cadena);
		if (pos > 0) {
			vocales = AnsiString(z) + vocales;
        }
    }
	return vocales;
}

void CargarVocales(TStringGrid *v, AnsiString cadena) {
	if (cadena.IsEmpty()) {
		v->ColCount--;
	} else {
		byte pos = cadena.Pos(" ");
		if (pos == 0) {
			pos = cadena.Length() + 1;
        }
		AnsiString palabra = cadena.SubString(1, pos - 1);
		cadena.Delete(1, pos);
		AnsiString vocales = Vocales(palabra);
		if (!vocales.IsEmpty()) {
			byte n = v->ColCount;
			v->Cells[n - 1][0] = vocales;
			v->ColCount++;
		}
		CargarVocales(v, cadena);
	}
}
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
