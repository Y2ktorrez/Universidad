//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Programación.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
// Factorial de un Número

Cardinal Factorial(Cardinal numero) {
	Cardinal resultado;

	if (numero == 0) { // caso base
		resultado = 1;
	} else { // caso general
		resultado = numero * Factorial(numero - 1);
	}
	return resultado;
}

void __fastcall TForm1::FactorialdeunNmero1Click(TObject *Sender)
{
    Txt_Resultado->Text = Factorial(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Digito de la serie S = 2,4,6,8,10...

byte Serie(byte numero) {
	byte resultado = 2;

	if (numero == 1) { // caso base
		resultado = 2;
	} else { // caso general
		resultado = resultado + Serie(numero - 1);
	}
	return resultado;
}

void __fastcall TForm1::DigitodelaSerie1Click(TObject *Sender)
{
    Txt_Resultado->Text = Serie(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Cantidad de Digitos que tiene un Número

int Cantidad_Digitos(int numero) {
	int resultado;
	if (numero < 10) { // caso base  n=12345
		resultado = 1;
	} else { // caso general
		resultado = Cantidad_Digitos(numero / 10) + 1;
	}
	return resultado;
}

void __fastcall TForm1::CantidadDigitosdeunNmero1Click(TObject *Sender)
{
    Txt_Resultado->Text = Cantidad_Digitos(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Suma de Digitos Pares

byte Suma_Digitos_Pares(Cardinal numero) {
	byte resultado;
	if (numero < 10) { // caso base    n=21463
		if (numero % 2 == 0)
			resultado = numero;
		else
			resultado = 0;
	} else { // caso general
		resultado = Suma_Digitos_Pares(numero / 10);
		if (numero % 2 == 0)
			resultado = resultado + numero % 10;
	}
	return resultado;
}

void __fastcall TForm1::SumadeDigitosPares1Click(TObject *Sender)
{
		Txt_Resultado->Text = Suma_Digitos_Pares(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Diferencia entre Digitos Pares y Digitos Impares

short int DifParImpar(Cardinal numero) {
	short int resultado;
	if (numero < 10) { // caso base
		if (numero % 2 == 0)
			resultado = numero;
		else
			resultado = -numero;
	} else { // caso general
		resultado = DifParImpar(numero / 10);
		if (numero % 2 == 0)
			resultado = resultado + numero % 10;
		else
			resultado = resultado - numero % 10;
	}
	return resultado;
}

void __fastcall TForm1::DiferenciaentrePreseImpares1Click(TObject *Sender)
{
    Txt_Resultado->Text = DifParImpar(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Potencia de un Número

Cardinal Potencia(int numero, byte exp) {
	Cardinal resultado;
	if (exp == 0) {
		resultado = 1;
	} else {
		resultado = Potencia(numero, exp / 2);
		if (exp % 2 == 0)
			resultado = resultado * resultado;
		else
			resultado = numero * resultado * resultado;
	}
	return resultado;
}

void __fastcall TForm1::PotenciadeunNmero1Click(TObject *Sender)
{
    Txt_Resultado->Text = Potencia(StrToInt(Txt_Numero->Text),
							StrToInt(Txt_Numero2->Text));
}
//---------------------------------------------------------------------------
// Digito Mayor de un Número

byte DigitoMayor(Cardinal x) {
	byte resultado;
	if (x < 10) { // caso base   x=12345
		resultado = x;
	} else { // caso general
		resultado = DigitoMayor(x / 10);
		if (x % 10 > resultado) {
			resultado = x % 10;
		}
	}
	return resultado;
}

void __fastcall TForm1::DigitoMayordeunNmero1Click(TObject *Sender)
{
    Txt_Resultado->Text = DigitoMayor(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Cantidad de Digitos Pares

byte CantidadPares(Cardinal x) {
	byte resultado;
	if (x < 10) { // caso base
		if (x % 2 == 0) {
			resultado = 1;
		} else {
			resultado = 0;
		}
	} else { // caso general
		resultado = CantidadPares(x / 10);
		if (x % 2 == 0) {
			resultado = resultado + 1;
		}
	}
	return resultado;
}

void __fastcall TForm1::CantidaddeDigitosPares1Click(TObject *Sender)
{
	Txt_Resultado->Text = CantidadPares(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
/* Escribir una función que devuelva la cantidad de dígitos pares
 que están inmediatamente antes de uno impar.

 Ej. CantDigPares(3827435) ==> 2 */

byte Cantidad_Pares(Cardinal numero) {
	byte cantidad;
	if (numero < 10) {  // caso base
		cantidad = 0;
	} else { // caso general
		byte digito = numero % 10;  // digito = 5
		cantidad = Cantidad_Pares(numero / 10); // cantidad = 2
		if ((((numero/10)%2)==0)&((digito%2)!=0)) {
			cantidad++;
		}
	}
	return cantidad;
}

void __fastcall TForm1::CantidadDigitosParesantesImpar1Click(TObject *Sender)
{
    Txt_Resultado->Text = Cantidad_Pares(StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
/* Escribir un proceso que lleve el mayor de los dígitos al final de
 un número.

 Ej.   x=382731;

 MoverMayor(x);
 // x=327318 */

void Mover_Mayor(Cardinal &numero) {
	if (numero > 9) { // caso general
		byte ultimo = numero % 10; // ultimo = 1
		Cardinal aux = numero / 10; // aux = 38273
		Mover_Mayor(aux); // aux = 32738
		byte digitoFinal = aux % 10; // digitoFinal = 8
		if (ultimo < digitoFinal) { // 1 > 8 = false
			numero = aux / 10; // numero = 3273
			numero = numero * 10 + ultimo; // numero = 32731
			numero = numero * 10 + digitoFinal; // numero = 327318
		} else {
			numero = aux * 10 + ultimo;
		}
	}
}

void __fastcall TForm1::DigitoMayoralFinal1Click(TObject *Sender)
{
	Cardinal numero = StrToInt(Txt_Numero->Text);
	Mover_Mayor(numero);
	Txt_Resultado->Text = StrToInt(numero);
}
//---------------------------------------------------------------------------
// Contar espacios en una cadena
// Ej: "Hola a todos " => 3

byte Cantidad_Espacios(AnsiString x) {
	byte cantidad;
	if (x == "") { // caso base
		cantidad = 0;
	} else { // caso general
		char z = x[x.Length()];
		x.Delete(x.Length(), 1);
		cantidad = Cantidad_Espacios(x);
		if (z == ' ') {
			cantidad++;
		}
	}
	return cantidad;
}

void __fastcall TForm1::ContarlosEspacios1Click(TObject *Sender)
{
	Txt_Resultado->Text = Cantidad_Espacios(Txt_Numero->Text);
}
//---------------------------------------------------------------------------
// Algoritmo para contar las vocales de una cadena
// Ej: "Hola a todos, como están" ==> 9

bool Es_Vocal(char z) {
	AnsiString vocales = "aeiouAEIOUáéíóúÁÉÍÓÚÜü";
	return vocales.Pos(z) > 0;
}

byte Contar_Vocales(AnsiString x) {
	byte contador;
	if (x == "") { // caso base
		contador = 0;
	} else { // caso general
		char z = x[1]; // z="H"
		x.Delete(1, 1); // x="ola a todos, como están"
		contador = Contar_Vocales(x); // contador=9
		if (Es_Vocal(z)) {
			contador++;
		}
	}
	return contador;
}

void __fastcall TForm1::ContarlasVocales1Click(TObject *Sender)
{
    Txt_Resultado->Text = Contar_Vocales(Txt_Numero->Text);
}
//---------------------------------------------------------------------------
// Algoritmo para Invertir una cadena
// Ej: "Anita lava la tina"

AnsiString Invertir_Cadena(AnsiString x) {
	AnsiString resultado;
	if (x == "") { // caso base
		resultado = "";
	} else { // caso general
		char z = x[1]; // z="a"
		x.Delete(1, 1); // x="nita lava la tina"
		resultado = Invertir_Cadena(x); // resultado="anit al aval atin"
		resultado = resultado + z; // resultado="anit al aval atina"
	}
	return resultado;
}

void __fastcall TForm1::Invertir1Click(TObject *Sender)
{
    Txt_Resultado->Text = Invertir_Cadena(Txt_Numero->Text);
}
//---------------------------------------------------------------------------
// Algoritmo para invertir una cadena utilizando la hipótesis k = n-2
// Ej: "Anita lava la tina"

AnsiString Invertir_Cadena2(AnsiString x) {
	AnsiString resultado;
	if (x.Length() <= 1) { // caso base
		resultado = x;
	} else { // caso general
		byte n = x.Length();
		AnsiString z = x.SubString(n - 1, 2); // z="na"
		x.Delete(n - 1, 2); // x="Anita lava la ti"
		resultado = Invertir_Cadena2(x); // resultado="it al aval atinA"
		resultado = AnsiString(z[2]) + z[1] + resultado;
		// resultado="anit al aval atinA"
	}
	return resultado;
}

void __fastcall TForm1::Invertir21Click(TObject *Sender)
{
    Txt_Resultado->Text = Invertir_Cadena2(Txt_Numero->Text);
}
//---------------------------------------------------------------------------
// Algoritmo para invertir una cadena utilizando la hipótesis k = n/2
// Ej: "Anita lava la tina"

AnsiString Invertir_Cadena3(AnsiString x) {
	AnsiString resultado;
	if (x.Length() <= 1) { // caso base
		resultado = x;
	} else { // caso general
		byte n = x.Length();
		AnsiString z = x.SubString(1, n / 2); // z = "Anita lav"
		x.Delete(1, n / 2); // x = "a la tina"
		z = Invertir_Cadena3(z); // z = "val atinA"
		x = Invertir_Cadena3(x); // x = "anit al a"
		resultado = x + z;
	}
	return resultado;
}

void __fastcall TForm1::Invertir31Click(TObject *Sender)
{
    Txt_Numero->Text = Invertir_Cadena3(Txt_Numero->Text);
}
//---------------------------------------------------------------------------
// Escribir una función que devuelva la palabra más larga de una cadena
// Ej. CadenaMasLarga(“esta es una prueba más”) ==> “prueba”

AnsiString Palabra_Larga(AnsiString cadena)
{
	AnsiString resultado, aux;
	cadena = cadena.Trim();
	byte n = cadena.Length();
	cadena = cadena + ' ';
	if (n == 0) { // caso base
		resultado = "";
	} else { // caso general
		byte pos = cadena.Pos(' '); // pos = 5
		aux = cadena.SubString(1, pos - 1); // aux = "esta"
		cadena.Delete(1, pos);   // cadena = "es una prueba más"
		resultado = Palabra_Larga(cadena);  // resultado = "prueba"
		if (aux.Length() >= resultado.Length()) {
			resultado = aux;
		}
	}
	return resultado;
}

void __fastcall TForm1::PalabramsLarga1Click(TObject *Sender)
{
	Txt_Resultado->Text = Palabra_Larga(Txt_Numero->Text);
}
//---------------------------------------------------------------------------
/* Escribir un proceso para eliminar la primer letra de cada palabra”
 Ej. x=“esta es una prueba más”;

 EliminaPrim (x);
 x ==> “sta s na rueba ás” */

void Eliminar_Primera_Letra(AnsiString &cadena)
{
	/*AnsiString resultado, aux;
	cadena = cadena.Trim();
	int n = cadena.Length();
	cadena = cadena + ' ';
	if (n == 0) {
		resultado = "";
	} else  {
		int pos = cadena.Pos(' ');
		aux = cadena.SubString(1, pos - 1);
		cadena.Delete(1,pos);
		resultado = Eliminar_Primera_Letra(cadena);
		if (aux.Length() != 0) {
			resultado = aux.Delete(1,1) + ' ' + resultado;
		}
	}
	return resultado;*/

	AnsiString aux;
	cadena = cadena.Trim();
	byte n = cadena.Length();
	cadena = cadena + ' ';
	if (n == 0) {
		cadena = "";
	} else {
		byte pos = cadena.Pos(' ');
		aux = cadena.SubString(1, pos - 1);
		cadena.Delete(1,pos);
		Eliminar_Primera_Letra(cadena);
		if (aux.Length() > 0) {
			cadena = aux.Delete(1,1) + " " + cadena;
		}
	}
}

void __fastcall TForm1::EliminarPrimeraLetra1Click(TObject *Sender)
{
	//Txt_Resultado->Text = Eliminar_Primera_Letra(Txt_Numero->Text);
	AnsiString resultado = Txt_Numero->Text;
	Eliminar_Primera_Letra(resultado);
	Txt_Resultado->Text = resultado;
}
//---------------------------------------------------------------------------
/* Escribir un proceso para invertir cada palabra de una cadena
 Ej. x=“esta es una prueba más”;

 InvertirPal (x);
 x ==> “ atse se anu abeurp sám” */

 AnsiString InvertirPalabra(AnsiString palabra)
 {
	AnsiString resultado;
	if (palabra == "") { // caso base
		resultado = "";
	} else {  // caso general
		char aux = palabra[1];
		palabra.Delete(1,1);
		resultado = InvertirPalabra(palabra);
		resultado = resultado + aux;
	}
	return resultado;
 }

 void Invertir_Cada_Palabra(AnsiString &cadena)
 {
	//AnsiString aux;
	/*cadena = cadena.TrimLeft();
	byte n = cadena.Length();
	cadena = cadena + ' ';
	if (n == 0) {
		cadena = "";
	} else {
		byte pos = cadena.Pos(' ');
		AnsiString aux = cadena.SubString(1, pos - 1);
		cadena.Delete(1, pos);
		char z = aux[1];
		aux.Delete(1,1);
		Invertir_Palabra(aux);
		Invertir_Palabra(cadena);
		cadena = aux + z + cadena;
	} */

	cadena = cadena.Trim();
	byte n = cadena.Length();
	cadena = cadena + ' ';
	if (n == 0) { // caso base
		cadena = "";
	} else {  // caso general
		byte pos = cadena.Pos(' ');
		AnsiString aux = cadena.SubString(1, pos - 1);
		cadena.Delete(1, pos);
		aux = InvertirPalabra(aux);
		Invertir_Cada_Palabra(cadena);
		cadena = aux + " " + cadena;
	}
 }

void __fastcall TForm1::InvertircadaPalabra1Click(TObject *Sender)
{
	//Txt_Resultado->Text = InvertirPalabra(Txt_Numero->Text);
	AnsiString resultado = Txt_Numero->Text;
	Invertir_Cada_Palabra(resultado);
	Txt_Resultado->Text = resultado;
}
//---------------------------------------------------------------------------
/* Escribir un proceso para invertir una parte de un vector
 (la parte comprendida entre a y b)

 Ej. v[2,5,65,23,45,2,13,45]
 Invetir (v, 2, 6)  ==>     v[2,5, 13, 2, 45, 23, 65, 45]

 Nota. Un solo proceso */

void Invertir_Vector(TStringGrid *v, Word a, Word b) {
  Word n;
  String x;
  n = b - a + 1;
  if (n > 1) {
    Invertir_Vector(v, a + 1, b - 1);
	x = v->Cells[b][0];
	v->Cells[b][0] = v->Cells[a][0];
	v->Cells[a][0] = x;
  }
}
/*void invert( TStringGrid *v ) {
  invVector( v, 0, v->ColCount - 1 );
}*/

void __fastcall TForm1::InvertirenunSegmento1Click(TObject *Sender)
{
	Invertir_Vector(StringGrid1,StrToInt(Txt_Numero->Text),StrToInt(Txt_Numero2->Text));
}
//---------------------------------------------------------------------------
void Cargar_Random(TStringGrid *v, byte n){
	if (n > 0) {
		Cargar_Random(v, n-1);
		v->Cells[n-1][0] = Random(20);
	}
}

 void __fastcall TForm1::Button1Click(TObject *Sender)
{
	StringGrid1->ColCount = StrToInt(Txt_Numero->Text);
	Cargar_Random(StringGrid1,StringGrid1->ColCount);
}
//---------------------------------------------------------------------------
/* Escribir un proceso para ordenar un vector. Con el algoritmo InsertionSort

 Nota. Máximo 2 proceso */

 void Insertar(TStringGrid *v,Word &n)
{
  String x = v->Cells[0][0];
  if (n > 1){
	   if (x >= v->Cells[n-1][0]) {
		  v->Cells[n][0]=x;
		  n++;
	   } else {
		  String z = v->Cells[n-1][0];
		  n--;
		  Insertar(v,n);
		  v->Cells[n][0]=z;
		  n++;
	   }
  }
}

void InsertionSort(TStringGrid *v, Word n) {
  if (n > 1) {
	Insertar(v, n);
	InsertionSort(v, n - 1);
  }
}

void __fastcall TForm1::Ordenar1Click(TObject *Sender)
{
	InsertionSort(StringGrid1,StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Txt_VectorExit(TObject *Sender)
{
    StringGrid1->ColCount = StrToInt(Txt_Vector->Text);
}
//---------------------------------------------------------------------------
// Algoritmo para sumar vectores

Word Sumar_Vectores(TStringGrid *v, Word n)
{
	Word resultado;
	if (n == 0) { // caso base
		resultado = 0;
	} else { // caso general
		resultado = Sumar_Vectores(v, n-1);
		resultado = resultado + StrToInt(v->Cells[n-1][0]);
	}
	return resultado;
}

void __fastcall TForm1::Suma1Click(TObject *Sender)
{
	Txt_Resultado->Text = Sumar_Vectores(StringGrid1, StrToInt(Txt_Numero->Text));
}
//---------------------------------------------------------------------------
// Algoritmo de busqueda binaria  (hip+otesis k=n/2)

bool Busqueda_Binaria(TStringGrid *v, int x, Word a, Word b)
{
	bool resultado; Word n=b-a+1;
	if (n == 0) { // primer caso base
		resultado = false;
	} else if (n == 1) { // segundo caso base
		if (x == StrToInt(v->Cells[a][0])){
			resultado = true;
		} else {
			resultado = false;
		}
	} else { // caso general
		byte c = (a+b)/2; // calculamos la posición de la casilla c
		if (StrToInt(v->Cells[c][0]) == x) {
			resultado = true;
		} else if (x < StrToInt(v->Cells[c][0])) {
			resultado = Busqueda_Binaria(v, x, a, c-1); // busca en la mitad izquierda
		} else {
			resultado = Busqueda_Binaria(v, x, c+1, b); // busca en la mitad derecha
		}
	}
	return resultado;
}

void __fastcall TForm1::BusquedaBinaria1Click(TObject *Sender)
{
	bool resultado;
	resultado = Busqueda_Binaria(StringGrid1, StrToInt(Txt_Numero->Text), 0, StrToInt(Txt_Vector->Text));
	if (resultado) {
		ShowMessage("SI está en el vector");
	} else {
        ShowMessage("NO está en el vector");
    }
}
//---------------------------------------------------------------------------
// Algoritmo de ordenamiento BubbleSort

void Burbujear(TStringGrid *v, Word n)    // lleva el mayor al final
{
	if (n > 1) { // caso general
		Burbujear(v, n-1);
		if (StrToInt(v->Cells[n-1][0]) < StrToInt(v->Cells[n-2][0])) {
			String x = v->Cells[n-1][0];
			v->Cells[n-1][0] = v->Cells[n-2][0];
			v->Cells[n-2][0] = x;
		}
	}
}

void BubbleSort(TStringGrid *v, Word n)
{
	if (n > 1) { // caso general
		Burbujear(v, n);
		BubbleSort(v, n-1);
	}
}

void __fastcall TForm1::BubleSort1Click(TObject *Sender)
{
	BubbleSort(StringGrid1, StringGrid1->ColCount);
}
//---------------------------------------------------------------------------
// Algoritmo para cargar una matriz m*n   (hipótesis n-1)

void Llenar_Fila(TStringGrid *A, Word f, Word n, Word k)
{
	if (n > 0) { // caso general
		Llenar_Fila(A, f, n-1, k-1);
		A->Cells[n-1][f] = k;
	}
}

void Cargar_Matriz(TStringGrid *A, Word m, Word n)
{
	if (m > 0) { // caso general
		Cargar_Matriz(A, m-1, n);
		Llenar_Fila(A, m-1, n, m*n);
	}
}

void __fastcall TForm1::Cargar1Click(TObject *Sender)
{
	StringGrid2->ColCount = StrToInt(Txt_Numero->Text);
	StringGrid2->RowCount = StrToInt(Txt_Numero2->Text);
	Cargar_Matriz(StringGrid2, StringGrid2->RowCount, StringGrid2->ColCount);
}
//---------------------------------------------------------------------------
// Algoritmo para cargar una matriz m*n   (hipótesis m-1, n-1)

void Llenar_FilaColumna(TStringGrid *A, Word f, Word n)
{
	if (n > 0) { // caso general
		Llenar_FilaColumna(A, f, n-1);
		A->Cells[n-1][f] = f+1;
		A->Cells[f][n-1] = f+1;
	}
}

void Cargar_Matriz2(TStringGrid *A, Word m, Word n)
{
	if (m > 0) { // caso general
		Cargar_Matriz2(A, m-1, n-1);
		Llenar_FilaColumna(A, m-1, n);
	}
}

void __fastcall TForm1::Cargar21Click(TObject *Sender)
{
	StringGrid2->ColCount = StrToInt(Txt_Numero->Text);
	StringGrid2->RowCount = StrToInt(Txt_Numero2->Text);
	Cargar_Matriz2(StringGrid2, StringGrid2->RowCount, StringGrid2->ColCount);
}
//---------------------------------------------------------------------------
// Algoritmo para cargar una matriz en forma de espiral

void Llenar_Alrededor(TStringGrid *A, Word fa, Word fb, Word ca, Word cb,Word n, Word k)
{
	if (n > 0) { //caso general
		Llenar_Alrededor(A, fa, fb, ca, cb, n-1, k);
		A->Cells[ca+n-1][fa] = k;
		A->Cells[ca+n-1][fb] = k;
		A->Cells[ca][fa+n-1] = k;
		A->Cells[cb][fa+n-1] = k;
	}
}

void Cargar_Espiral(TStringGrid *A, Word fa, Word fb)
{
	Word m = fb-fa+1;
	if (m > 0) { // primer caso base no hace nada
		if (m == 1)  // segundo caso base
			A->Cells[fa][fa] = 1;
		else { // caso general
			Cargar_Espiral(A, fa+1, fb-1);
			Llenar_Alrededor(A, fa, fb, fa, fb, m, (m+1)/2);
		}
	}
}

void __fastcall TForm1::CargarEspiral1Click(TObject *Sender)
{
	StringGrid2->RowCount = StrToInt(Txt_Numero->Text);
	StringGrid2->ColCount = StringGrid2->RowCount;
	Cargar_Espiral(StringGrid2, 0, StringGrid2->RowCount-1 );
}
//---------------------------------------------------------------------------
// Algoritmo para cargar una matriz en forma de cuadrado mágico

void Cuadrado_Magico(TStringGrid *A, Word m, Word n, Word &f, Word &c)
{
	if (n == 1) { // primer caso base, coloca el primer dato
		f = 0; c = m/2;
		A->Cells[c][f] = 1;
	} else { // caso general
		Cuadrado_Magico(A, m, n-1, f, c);
		if ((n-1) % m == 0)  // si es multiplo
			f++; // una casilla abajo
		else {
			c++;
			if (c == m)
				c = 0;
			if (f == 0)
				f = m-1;
			else
				f--;
		}
		A->Cells[c][f] = n;
	}
}

void __fastcall TForm1::CuadradoMgico1Click(TObject *Sender)
{
	Word a, b, m = StrToInt(Txt_Numero->Text);
	StringGrid2->RowCount = m;
	StringGrid2->ColCount = m;
	Cuadrado_Magico(StringGrid2, m, m*m,a ,b);
}
//---------------------------------------------------------------------------

 void Cuadrado_Magico2(TStringGrid *A, Word m, Word n, Word &f, Word &c)
{
	if (n == 1) { // primer caso base, coloca el primer dato
		f = 0; c = m/2;
		A->Cells[c][f] = 1;
	} else { // caso general
		Cuadrado_Magico(A, m, n-1, f, c);
		if ((n-1) % m == 0)  // si es multiplo
			f++; // una casilla abajo
		else {
			c--;
			if (c == 0)
				c = m-1;
			if (f == m)
				f = 0;
			else
				f--;
		}
		A->Cells[c][f] = n;
	}
}

void __fastcall TForm1::CuadradoMagico21Click(TObject *Sender)
{
	Word a, b, m = StrToInt(Txt_Numero->Text);
	StringGrid2->RowCount = m;
	StringGrid2->ColCount = m;
	Cuadrado_Magico2(StringGrid2, m, m*m,a ,b);
}
//---------------------------------------------------------------------------
void Llenar_FilaColumna2(TStringGrid *A, Word f, Word n)
{
	if (n > 0) { // caso general
		Llenar_FilaColumna2(A, f, n-1);
		A->Cells[0][0] = n-1;
		A->Cells[0][0] = n-1;
	}
}

void Cargar_Matriz3(TStringGrid *A, Word m, Word n)
{
	if (m > 0) { // caso general
		Cargar_Matriz3(A, m-1, n-1);
		Llenar_FilaColumna2(A, m-1, n);
	}
}

void __fastcall TForm1::CargarDegradedeMayoraMenor1Click(TObject *Sender)
{
 	StringGrid2->ColCount = StrToInt(Txt_Numero->Text);
	StringGrid2->RowCount = StrToInt(Txt_Numero2->Text);
	Cargar_Matriz3(StringGrid2, StringGrid2->RowCount, StringGrid2->ColCount);
}
//---------------------------------------------------------------------------

