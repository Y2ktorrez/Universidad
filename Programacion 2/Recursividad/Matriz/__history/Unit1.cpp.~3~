//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz por filas de izquierda a derecha
/*
	 1  2  3  4
	 5  6  7  8
	 9 10 11 12
	13 14 15 16
*/
void LlenarFila(TStringGrid *A, byte m, byte n, byte num) {
	if (n > 0) {
		LlenarFila(A, m, n - 1, num - 1);
		A->Cells[n - 1][m] = num;
	}
}
void CargarFilas(TStringGrid *A, byte m, byte n) {
	if (m > 0) {
		CargarFilas(A, m - 1, n);
		LlenarFila(A, m - 1, n, m * n);
	}
}

void __fastcall TForm1::Matrices2Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte m = StringGrid1->RowCount;
	byte n = StringGrid1->ColCount;
	CargarFilas(StringGrid1, m, n);
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz por filas de derecha a izquierda
/*
	4  3  2  1
	8  7  6  5
	12 11 10 9
	16 15 14 13
*/
void Llenar_HDI(TStringGrid *v, byte row, byte col, byte &serie) {
	if (col == 1) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
		Llenar_HDI(v, row, col - 1, serie);
	}
}
void Matriz_DIAB(TStringGrid *M, byte row, byte col, byte &serie) {
	if (row == 1) {
		Llenar_HDI(M, row, col, serie);
	} else {
		Matriz_DIAB(M, row - 1, col, serie);
		Llenar_HDI(M, row, col, serie);
	}
}

void __fastcall TForm1::N21Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Matriz_DIAB(StringGrid1, row, col, serie);
	Llenar_HDI(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz por columnas de arriba a abajo
/*
	 1 5 9  13
	 2 6 10 14
	 3 7 11 15
	 4 8 12 16
*/
void Llenar_VAB(TStringGrid *v, byte row, byte col, byte &serie) {
	if (row == 1) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		Llenar_VAB(v, row - 1, col, serie);
		v->Cells[col - 1][row - 1] = serie;
		serie++;
    }
}
void Matriz_ABID(TStringGrid *M, byte row, byte col, byte &serie) {
	if (col == 1) {
		Llenar_VAB(M, row, col, serie);
	} else {
		Matriz_ABID(M, row, col - 1, serie);
		Llenar_VAB(M, row, col, serie);
	}
}

void __fastcall TForm1::N22Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Matriz_ABID(StringGrid1, row, col, serie);
//	Llenar_VAB(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz en serpiente de izq a der
/*
	 1   2   3   4
	 8   7   6   5
	 9   10  11  12
	 16  15  14  13
*/
void Llenar_HID(TStringGrid *v, byte row, byte col, byte &serie) {
	if (col == 1) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		Llenar_HID(v, row, col - 1, serie);
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	}
}
void Matriz_Serpiente_IDDI_AB(TStringGrid *M, byte row, byte col, byte &serie) {
	if (row == 1) {
		Llenar_HID(M, row, col, serie);
	} else {
		Matriz_Serpiente_IDDI_AB(M, row - 1, col, serie);
		if (row % 2 == 0) {
			Llenar_HDI(M, row, col, serie);
		} else {
			Llenar_HID(M, row, col, serie);
		}
	}
}

void __fastcall TForm1::N41Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Matriz_Serpiente_IDDI_AB(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz en serpiente de izq a der
/*
	 13 14 15 16
	 12 11 10 9
	 5  6  7  8
	 4  3  2  1
*/
/*void Llenar_HID(TStringGrid *v, byte row, byte col, byte &serie) {
	if (col == 1) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		Llenar_HID(v, row, col - 1, serie);
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	}
}*/
void Matriz_Serpiente_DIID_BA(TStringGrid *M, byte row, byte col, byte &serie) {
	if (row == 1) {
		if ((col - row) % 2 == 0) {
			Llenar_HDI(M, row, col, serie);
		} else {
			Llenar_HID(M, row, col, serie);
		}
	} else {
		if ((col - row) % 2 == 0) {
			Llenar_HDI(M, row, col, serie);
		} else {
			Llenar_HID(M, row, col, serie);
		}
		Matriz_Serpiente_DIID_BA(M, row - 1, col, serie);
	}
}

void __fastcall TForm1::N42Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Matriz_Serpiente_DIID_BA(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz triangular de izq a der
/*
	 1  2 3 4
	 5  6 7
	 8  9
	 10
*/

/*void Llenar_HID(TStringGrid *v, byte row, byte col, byte &serie) {
	if (col == 1) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		Llenar_HID(v, row, col - 1, serie);
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	}
}*/

void Triangular_SI_IDAB(TStringGrid *M, byte row, byte col, byte &serie) {
	if (row == 1) {
		Llenar_HID(M, row, col, serie);
	} else {
		Triangular_SI_IDAB(M, row - 1, col, serie);
		Llenar_HID(M, row, col - (row - 1), serie);
	}
}

void __fastcall TForm1::N61Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Triangular_SI_IDAB(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

// Algoritmo que carga una matriz triangular de der a izq
/*
	 4 3 2 1
	   7 6 5
		 9 8
		  10
*/
void Llenar_HDI_Diagonal(TStringGrid *v, byte row, byte col, byte &serie) {
	if (col <= row) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
		Llenar_HDI_Diagonal(v, row, col - 1, serie);
	}
}
void Triangular_SD_DIAB(TStringGrid *M, byte row, byte col, byte &serie) {
	if (row <= 1) {
		Llenar_HDI_Diagonal(M, row, col, serie);
	} else {
		Triangular_SD_DIAB(M, row - 1, col, serie);
		Llenar_HDI_Diagonal(M, row, col, serie);
	}
}

void __fastcall TForm1::N62Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Triangular_SD_DIAB(StringGrid1, row, col, serie);
//	Llenar_HDI_Diagonal(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

/*
	 1 5 8 10
	 2 6 9
	 3 7
	 4
*/

/*void Llenar_VAB(TStringGrid *v, byte row, byte col, byte &serie) {
	if (row == 1) {
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	} else {
		Llenar_VAB(v, row - 1, col, serie);
		v->Cells[col - 1][row - 1] = serie;
		serie++;
	}
}*/

void Triangular_SI_ABID(TStringGrid *M, byte row, byte col, byte &serie) {
	if (col <= 1) {
		Llenar_VAB(M, row, col, serie);
	} else {
		Triangular_SI_ABID(M, row, col - 1, serie);
		Llenar_VAB(M, row - (col - 1), col, serie);
	}
}

void __fastcall TForm1::N81Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	byte row = StringGrid1->RowCount;
	byte col = StringGrid1->ColCount;
	byte serie = 1;
	Triangular_SI_ABID(StringGrid1, row, col, serie);
}
//---------------------------------------------------------------------------

/* Algoritmo para cargar una matriz m*n   (hipótesis m-1, n-1)

 1  2  3  4
 2  2  3  4
 3  3  3  4
 4  4  4  4
 */

void Llenar_FilaColumna(TStringGrid *A, Word f, Word n) {
	if (n > 0) { // caso general
		Llenar_FilaColumna(A, f, n - 1);
		A->Cells[n - 1][f] = f + 1;
		A->Cells[f][n - 1] = f + 1;
	}
}
void Cargar_Matriz2(TStringGrid *A, Word m, Word n) {
	if (m > 0) { // caso general
		Cargar_Matriz2(A, m - 1, n - 1);
		Llenar_FilaColumna(A, m - 1, n);
	}
}

void __fastcall TForm1::N82Click(TObject *Sender)
{
StringGrid1->ColCount = StrToInt(Edit1->Text);
	StringGrid1->RowCount = StrToInt(Edit2->Text);
	Cargar_Matriz2(StringGrid1, StringGrid1->RowCount, StringGrid1->ColCount);
}
//---------------------------------------------------------------------------

/* Cargar una matriz por filas

 16  15  14  13
 12  11  10   9
 8   7   6   5
 4   3   2   1
 */

void cargarCol(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (c > 0) {
		m->Cells[c - 1][f - 1] = v;
		v++;
		cargarCol(m, f, c - 1, v);
	}
}
void cargarTodoFila(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (f > 0) {
		cargarCol(m, f, c, v);
		cargarTodoFila(m, f - 1, c, v);
	}
}

void __fastcall TForm1::N101Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	Cardinal f = StringGrid1->RowCount;
	Cardinal c = StringGrid1->ColCount;
	Cardinal v = 1;
	cargarTodoFila(StringGrid1, f, c, v);
}
//---------------------------------------------------------------------------

/* Cargar una matriz por columnas

 16  12  8  4
 15  11  7  3
 14  10  6  2
 13   9  5  1
 */
void cargarFil(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (f > 0) {
		m->Cells[c - 1][f - 1] = v;
		v++;
		cargarFil(m, f - 1, c, v);
	}
}
void cargarTodoCol(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (c > 0) {
		cargarFil(m, f, c, v);
		cargarTodoCol(m, f, c - 1, v);
	}
}

void __fastcall TForm1::N111Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	Cardinal f = StringGrid1->RowCount;
	Cardinal c = StringGrid1->ColCount;
	Cardinal v = 1;
	cargarTodoCol(StringGrid1, f, c, v);
}
//---------------------------------------------------------------------------

/* Cargar diagonal secundaria inferior de una matriz

		  10
	   9  8
	7  6  5
 4  3  2  1
 */
void aux_sec_inf(TStringGrid* m, Byte f, Byte lc, Byte c, Cardinal &v) {
	if (c > lc) {
		Byte fil = f - 1;
		Byte col = c - 1;
		m->Cells[col][fil] = v;
		v++;
		aux_sec_inf(m, f, lc, c - 1, v);
	}
}
void diag_sec_inf(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (f > 0) {
		Byte lc = c - f;
		aux_sec_inf(m, f, lc, c, v);
		diag_sec_inf(m, f - 1, c, v);
	}
}

void __fastcall TForm1::N112Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	Cardinal f = StringGrid1->RowCount;
	Cardinal c = StringGrid1->ColCount;
	Cardinal v = 1;
	diag_sec_inf(StringGrid1, f, c, v);
}
//---------------------------------------------------------------------------

/* Cargar el exterior de una matriz

 1  2  3  4
 5        5
 4        6
 3  2  1  7
 */
void ext_fila(TStringGrid* m, Byte f, Byte c, Cardinal &v, bool sube) {
	if (sube) {
		if (c <= m->ColCount) {
			m->Cells[c - 1][f - 1] = v;
			v++;
			ext_fila(m, f, c + 1, v, sube);
		}
	}
	else {
		if (c > 0) {
			m->Cells[c - 1][f - 1] = v;
			v++;
			ext_fila(m, f, c - 1, v, sube);
		}
	}
}
void ext_col(TStringGrid* m, Byte f, Byte c, Cardinal &v, bool sube) {
	if (sube) {
		if (f <= m->RowCount) {
			m->Cells[c - 1][f - 1] = v;
			v++;
			ext_col(m, f + 1, c, v, sube);
		}
	}
	else {
		if (f > 1) {
			m->Cells[c - 1][f - 1] = v;
			v++;
			ext_col(m, f - 1, c, v, sube);
		}
	}
}
void cargar_exterior(TStringGrid* m, int f, int c) {
	if (f != -1) {
		Byte i = m->RowCount;
		Byte j = m->ColCount;
		bool subeFila = f == 1;
		bool subeCol = c == 1;
		Cardinal v = 1;
		Byte proxFil, proxCol;
		if (f == 1)
			proxFil = f + 1;
		else
			proxFil = f - 1;
		if (c == 1)
			proxCol = j;
		else
			proxCol = 1;
		ext_fila(m, f, c, v, subeFila);
		ext_col(m, proxFil, proxCol, v, subeCol);
		if (f == m->RowCount)
			cargar_exterior(m, -1, -1);
		else
			cargar_exterior(m, i, j - 1);
	}
}

void __fastcall TForm1::N131Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	Cardinal f = StringGrid1->RowCount;
	Cardinal c = StringGrid1->ColCount;
	cargar_exterior(StringGrid1, 1, 1);
}
//---------------------------------------------------------------------------

/* Cargar la matriz diagonal inferior A(n)

			1
		 3  5
	 7   9  11
 13 15  17  19
 */
void aux_matriz1(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (c > 0) {
		Byte fil = m->RowCount - f;
		Byte col = m->ColCount - c;
		m->Cells[col][fil] = v;
		v += 2;
		aux_matriz1(m, f, c - 1, v);
	}
}
void cargar_matriz1(TStringGrid* m, Byte f, Byte c, Cardinal &v) {
	if (f > 0) {
		Byte col = m->ColCount - c + 1;
		aux_matriz1(m, f, col, v);
		cargar_matriz1(m, f - 1, c - 1, v);
	}
}

void __fastcall TForm1::N132Click(TObject *Sender)
{
	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	Cardinal f = StringGrid1->RowCount;
	Cardinal c = StringGrid1->ColCount;
	Cardinal v = 1;
	cargar_matriz1(StringGrid1, f, c, v);
}
//---------------------------------------------------------------------------

/* Cargar la matriz diagonal superior A(n)

 1  1  2  3
	1  2  3
	   1  3
		  1
 */
void aux_matriz2(TStringGrid* m, Byte f, Byte c, Byte lim) {
	if (c > lim) {
		Byte fil = m->RowCount - f;
		if (c == lim + 1)
			m->Cells[c - 1][fil] = 1;
		else
			m->Cells[c - 1][fil] = (c - 1);
		aux_matriz2(m, f, c - 1, lim);
	}
}
void cargar_matriz2(TStringGrid* m, Byte f, Byte c) {
	if (f > 0) {
		Byte lim = m->ColCount - c;
		aux_matriz2(m, f, m->ColCount, lim);
		cargar_matriz2(m, f - 1, c - 1);
	}
}

void __fastcall TForm1::N151Click(TObject *Sender)
{
 	StringGrid1->RowCount = StrToInt(Edit1->Text);
	StringGrid1->ColCount = StrToInt(Edit2->Text);
	Cardinal f = StringGrid1->RowCount;
	Cardinal c = StringGrid1->ColCount;
	cargar_matriz2(StringGrid1, f, c);
}
//---------------------------------------------------------------------------

