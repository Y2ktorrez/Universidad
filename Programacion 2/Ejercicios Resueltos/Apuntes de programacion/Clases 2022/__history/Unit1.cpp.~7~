//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

/*Escribir una funcion que devuelva la suma de los digitos de un
  numero Ej: x=2473845 -> 33*/

byte Suma(Cardinal x)
{ byte s;
  if (x<10){ //caso base
	 s=x;
  } else{ // caso general
	 s=Suma(x/10);
	 s=s + x%10;
  }
  return s;
}

void __fastcall TForm1::Apuntedeclase2Click(TObject *Sender)
{
  Edit2->Text=Suma(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

/*Funcion que devuelva el mayor de los digitos de un numero
  Ej: x=243753 -> 7*/

byte Mayor(Cardinal x)
{  byte m;
   if (x<10){ //caso base
	  m=x;
   } else{    //caso general
	  m=Mayor(x/10);
	  if (x%10 > m)
		 m=x%10;
   }
   return m;
}


void __fastcall TForm1::Mayor1Click(TObject *Sender)
{
  Edit2->Text=Mayor(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

/*Funcion que devulvala suma de los digitos impares de un numero
  Ej: x=4525637 -> 20*/

byte SumaDigImp (Cardinal x)
{ byte sum;
  if (x<10){   //caso base
	 if(x%2 == 1)
	  sum= x;
	 else
	  sum=0;
  } else{      //caso general
	  sum = SumaDigImp(x/10);
	  if(((x%10)%2)==1)
		sum=sum+(x%10);
  }
  return sum;
}


void __fastcall TForm1::SumaDIgImp1Click(TObject *Sender)
{
   Edit2->Text=SumaDigImp(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

/*Proceso para eliminar los digitos impares de un numero
  Ej: x=34875261 ->4826*/

void ElimDigImp(Cardinal &x)
{ if (x<10){ //caso base
	if (x%2==1)
	 x=0;
  } else{ //caso general
	byte d=x%10;
	x=x/10;
	ElimDigImp(x);
	if (d%2==0)
		x=x*10+d;
  }
}

void __fastcall TForm1::Clase22Click(TObject *Sender)
{ Cardinal z;
  z=StrToInt(Edit1->Text);
  ElimDigImp(z);
  Edit1->Text=z;
}
//---------------------------------------------------------------------------

/*Proceso que devuelva el digito Mayor y el digito menor de un numero
  Ej: x=425376 -> menor=2, mayor=7*/

void MayorMenor(Cardinal x, byte &M, byte &m)
{ if (x<10){ //caso base
	m=x;
	M=x;
  } else{ //caso general
	byte d=x%10;
	MayorMenor(x/10,M,m);
	if (d<m)
		m=d;
	if (d>M)
		M=d;
  }
}

void __fastcall TForm1::MayorMenor1Click(TObject *Sender)
{ byte a,b;
  MayorMenor(StrToInt(Edit1->Text),a,b);
  Edit2->Text=a;
  Edit3->Text=b;

}
//---------------------------------------------------------------------------

/*Escribir un proceso para invertir un cadena
  Ej: x=Hola todos -> sodot aloh*/

void Invertir(AnsiString &x)
{ byte n=x.Length();
  if (n<2){  //caso base n=0, n=1
   //nada, nose hace nada
  } else {   //caso general n>1
	  AnsiString y=x.SubString(1,2);
	  x.Delete(1,2);
	  Invertir(x);
	  x=x+y[2]+y[1];
  }
}

/*void Invertir2(AnsiString &x)
{ byte n=x.Length();
   if (n>1){
	  AnsiString y=x.SubString(1,2);
	  x.Delete(1,2);
	  Invertir2(x);
	  x=x+y[2]+y[1];
  }
} */

/*void Invertir3(AnsiString &x)
{ byte n=x.Length();
   if (n>1){ //caso general
	  AnsiString y=x.SubString(1,n/2);
	  x.Delete(1,n/2);
	  Invertir3(x);
	  Invertir3(y);
	  x=x+y;
  }
} */

void __fastcall TForm1::Clase32Click(TObject *Sender)
{ AnsiString a;
  a=Edit1->Text;
  Invertir(a);
  Edit1->Text=a;

}
//---------------------------------------------------------------------------

