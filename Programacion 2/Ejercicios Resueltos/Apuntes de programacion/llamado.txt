
///**************************************************************************///
///************ DESDE AQUÍ EMPIEZO A LLAMAR A TODAS MIS FUNCIONES ***********///

///********** POR AQUÍ ACCEDO DIRECTO A LAS FUNCIONES DESDE EL MENÚ *********///
///**************************************************************************///

//------------------------------------------------------------------------------
void __fastcall TForm1::Fibonacci1Click(TObject *Sender) {
  short a;
  a = StrToInt( InputBox( "* SERIE FIBONACCI", "* INGRESE UN NÚMERO: ", "0" ) );
  EditMostrar->Text = Fibo( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Ascendentes1Click(TObject *Sender) {
  byte a;
  a = StrToInt( InputBox( "* PRIMEROS N NÚMEROS NATURALES", "* INGRESE UN NÚMERO: ", "0" ) );
  Mostrar( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Descendentes1Click(TObject *Sender) {
  byte a;
  a = StrToInt( InputBox( "* PRIMEROS N NÚMEROS NATURALES", "* INGRESE UN NÚMERO: ", "0" ) );
  Mostrar1( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Pares1Click(TObject *Sender) {
  byte a;
  a = StrToInt( InputBox( "* PRIMEROS N NÚMEROS PARES", "* INGRESE UN NÚMERO: ", "0" ) );
  MostrarPares( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Impares1Click(TObject *Sender) {
  byte a;
  a = StrToInt( InputBox( "* PRIMEROS N NÚMEROS IMPARES", "* INGRESE UN NÚMERO: ", "0" ) );
  MostrarImpares( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Digitos1Click(TObject *Sender) {
  int a;
  a = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS DE UN NÚMERO", "* INGRESE UN NÚMERO: ", "0" ) );
  ( *EditMostrar ).Text = SumaDigitos( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::DigitoPares1Click(TObject *Sender) {
  Cardinal a;
  a = StrToInt( InputBox( "* ELIMINAR DÍGITOS PARES DE UN NÚMERO", "* INGRESE UN NÚMERO: ", "0" ) );
  EliminarPares( a );
  ShowMessage( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Pares2Click(TObject *Sender) {
  int a;
  a = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS PARES DE UN NÚMERO", "* INGRESE UN NÚMERO: ", "0" ) );
  ( *EditMostrar ).Text = SumaDigitosPares( a );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::ParesImpares1nro1Click(TObject *Sender) {
  Cardinal x,p,i;
  x = StrToInt( InputBox( "* SEPARAR DÍGITOS PARES-IMPARES DE UN NÚMERO", "* INGRESE UN NÚMERO: ", "0" ) );
  Sep_Imp_Par( p, i, x );
  ShowMessage( " [ " +IntToStr( p ) +'|'+ IntToStr( i ) + " ] " );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::BtnSepararClick(TObject *Sender) {
  Cardinal x, y, z;
  EditMostrar->Clear( );
  x = StrToInt( InputBox( "* SEPARAR PAR - IMPAR", "* INGRESE UN NÚMERO: ", "0" ) );
  y = StrToInt( InputBox( "* SEPARAR PAR - IMPAR", "* INGRESE OTRO NÚMERO: ", "0" ) );
  Edit1->Text = x;
  Edit2->Text = y;
  juntar( x, y, z );
  if ( z <= 999999999 ) {
    EditMostrar->Text = z;
    Sep_Imp_Par( x, y, z );
  }
  Edit1->Text = x;
  Edit2->Text = y;
}
//------------------------------------------------------------------------------
void __fastcall TForm1::BurbujaClick(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* ORDENAR UN VECTOR POR BURBUJA", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* ORDENAR UN VECTOR POR BURBUJA", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  OrdenarBurbu( n, v );
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text + "-" + IntToStr( v[ i ] );
  }
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Juntar2Nro1Click(TObject *Sender) {
  Cardinal x, y, z;
  EditMostrar->Clear( );
  x=StrToInt( InputBox( "* JUNTAR LOS DÍGITOS DE DOS NÚMEROS", " * INGRESE UN NÚMERO: ", "0" ) );
  y=StrToInt( InputBox( "* JUNTAR LOS DÍGITOS DE DOS NÚMEROS", " * INGRESE OTRO NÚMERO: ", "0" ) );
  Edit1->Text = x;
  Edit2->Text = y;
  juntar( x, y, z );
  if ( z <= 999999999 )
    EditMostrar->Text = z;
  else
    EditMostrar->Text = "NO SE PUDO JUNTAR";
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Potenciaxn1Click(TObject *Sender) {
  Word x, n;
  x = StrToInt( InputBox( "* POTENCIA X ^ N", "* INGRESE UN NÚMERO: ", "0" ) );
  n = StrToInt( InputBox( "* POTENCIA X ^ N", "* INGRESE POTENCIA: ", "0" ) );
  EditMostrar->Text = FloatToStr( Potencia( x, n ) );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Burbuja1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* ORDENAR UN VECTOR POR BURBUJA", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* ORDENAR UN VECTOR POR BURBUJA", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  OrdenarBurbu( n, v );
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text + "-" + IntToStr( v[ i ] );
  }
}
//------------------------------------------------------------------------------
void __fastcall TForm1::SumaDgitosPares1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS DE UN VECTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS DE UN VECTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  EditMostrar->Text = IntToStr( SumaV( v, n ) );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::SumaDgitos1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS PARES DE UN VECTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS PARES DE UN VECTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  EditMostrar->Text = IntToStr( sumaPares( v, n ) );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::SumaDgitosImpares1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS IMPARES DE UN VECTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* SUMA DE LOS DÍGITOS IMPARES DE UN VECTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  EditMostrar->Text = IntToStr( SumaImpares( v, n ) );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::PromedioDgitos1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* PROMEDIO DE LOS DÍGITOS DE UN VECTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* PROMEDIO DE LOS DÍGITOS DE UN VECTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  EditMostrar->Text = FloatToStr( PromedioV( v, n ) );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::MayorDgito1Click(TObject *Sender) {
int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* MAYOR DÍGITO DE UN VECTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* MAYOR DÍGITO DE UN VECTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  EditMostrar->Text = IntToStr( Mayor( v, n ) );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::Clear1Click(TObject *Sender) {
  Edit1->Clear( );
  Edit2->Clear( );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::OrdenarBurbuja1Click(TObject *Sender) {
  Cardinal a;
  a = StrToInt( InputBox( "* ORDENAR DÍGITOS DE UN NÚMERO POR BURBUJA", "* INGRESE UN NÚMERO: ", "0" ) );
  OrdenarX( a );
  ShowMessage( a );
}
//------------------------------------------------------------------------------
/*void __fastcall TForm1::OrdenarInsertar1Click(TObject *Sender) {
  Cardinal a;
  a = StrToInt(InputBox("* ORDENAR LOS DÍGITOS DE UN NÚMERO POR INSERCIÓN","* INGRESE UN NÚMERO: "," "));
  Ordenar( a );
  ShowMessage( a );  //ALGO ESTA MALLLLLLLLLLLLLLL
}  */
//------------------------------------------------------------------------------
void __fastcall TForm1::Exit1Click(TObject *Sender) {
  Application->Terminate( );
}
//---------------------------------------------------------------------------
void __fastcall TForm1::BtnSalirClick(TObject *Sender) {
  Application->Terminate( );
}
//------------------------------------------------------------------------------
void __fastcall TForm1::TimerAutorTimer(TObject *Sender) {
  LbAutor->Visible =!LbAutor->Visible;
  ImgCamba->Visible = !ImgCamba->Visible;
  ImgkoRn->Visible = !ImgkoRn->Visible;
}
//------------------------------------------------------------------------------
void __fastcall TForm1::TimerResultadoTimer(TObject *Sender) {
  LblResultado->Visible = !LblResultado->Visible;
}
//------------------------------------------------------------------------------
void __fastcall TForm1::TimerTituloTimer(TObject *Sender) {
  String x, s = "";
  s = Caption;
  char ch = s[ 1 ];
  s.Delete( 1, 1 );
  s.Insert( ch, s.Length( ) );
  Caption = s;
  x += 11;
/// ESTE CÓDIGO ME PERMITIRÁ MOVER EL TÍTULO DE LA VENTANA FORM1 ///
/*String cad, aux;               //var cad,aux:string;
  cad = Form1->Caption;         //cad:=FrmExplorador.Caption;
  aux = cad[cad.Length()];     //aux:=cad[length(cad)];
  delete(cad, cad.Length(),1);//Delete(cad,length(cad),1);
  cad = aux + cad;           //cad:=aux+cad;
  Form1->Caption = cad;*/   //FrmExplorador.Caption:=cad;
}
//------------------------------------------------------------------------------
void __fastcall TForm1::InvertirElementos1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* INVERTIR ELEMENTOS DE UN VECTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* INVERTIR ELEMENTOS DE UN VECTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  Invertir( v, n );
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text + "-" + IntToStr( v[ i ] );
  }   //v[6]={1,3,8,9,10,7};
}
//------------------------------------------------------------------------------
void __fastcall TForm1::BusquedaBinaria1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* BUSQUEDA BINARIA", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* BUSQUEDA BINARIA", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  BusBin( v, n, 10 );
  for ( i = 0; i < n; i++ ) {
    if ( BusBin( v, n, 10 ) )             // OJO MUESTRA LAS VECES DE DIGITOS DEL VECTOR //
      ShowMessage( "SE ENCUENTRA EL VALOR =)" );
    else
      ShowMessage( "NO SE ENCUENTRA EL VALOR =(" );
  }
}
//------------------------------------------------------------------------------
void __fastcall TForm1::BusBinariaClick(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* BUSQUEDA BINARIA", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* BUSQUEDA BINARIA", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  BusBin( v, n, 10 );
  for ( i = 0; i < n; i++ ) {
    if ( BusBin( v, n, 10 ) )             // OJO MUESTRA LAS VECES DE DIGITOS DEL VECTOR //
      ShowMessage( "SE ENCUENTRA EL VALOR =)" );
    else
      ShowMessage( "NO SE ENCUENTRA EL VALOR =(" );
  }
}
//-----------------------------------------------------------------------------
void __fastcall TForm1::QuickSort1Click(TObject *Sender) {
  int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "* ORDENAR UN VECTOR POR QUICKSORT", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "* ORDENAR UN VECTOR POR QUICKSORT", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  QuickSort(v,n);
  //OrdenarBurbu( n, v );
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text + "-" + IntToStr( v[ i ] );
  }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::CargaRandomizeClick(TObject *Sender) {
  Word i, n ;
  n = StrToInt( InputBox( "* CARGA RANDOMIZE", "* INGRESE DIMENSIÓN: ", "0" ) );
  Vextor->ColCount = n;
  Randomize( );
  for ( i = 0; i < n; i++ ) {
    Vextor->Cells[ i ][ 0 ] = random( 20 );
  }
}
//------------------------------------------------------------------------------

///**************************************************************************///
///******************* LLAMADOS A LOS MÉTODOS RECURSIVOS ********************///
///**************************************************************************///

void __fastcall TForm1::BTNRECURSIVOClick(TObject *Sender) {


//****************************************************************************//
//********* LLAMADOS A TODOS LOS MÉTODOS DEL PRÁCTICO # 2 DE VERANO **********//
//****************************************************************************//

//------------------------------------------------------------------------------
// 1)
  /*int v[ 8 ] = { 8, 2, 3, 1, 3, 5, 6 }, n = 8;
  if( SumaMitades( v, n ) )
    ShowMessage( " SON IGUALES " );
  else
    ShowMessage( "No son Iguales" );*/  //OK OK OK OK OK OK

  /*int v[ 50 ], i;
  int n;
  String x;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  if( SumaMitades( v, n ) )
    ShowMessage( " SON IGUALES " );
  else
    ShowMessage( "No son Iguales" );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 2)
  /*int x = StrToInt(InputBox("","",""));
  if ( existe(v,n,x))
    ShowMessage("SI");
  else
    ShowMessage("NO");*/  //

  /*int v[ 3 ] = { 2, 3, 4 };
  int n = 3;
  int v1[ 6 ] = { 1, 2, 3, 4, 5, 6 };
  int m = 6;
  if ( contenido( v, v1, n, m ) )
    ShowMessage( "EL VECTOR A ESTÁ EN EL VECTOR B" );
  else
    ShowMessage( "EL VECTOR A NO ESTÁ EN EL VECTOR B" );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 3) MUESTRA EL PRODUCTO DE DOS NÚMEROS POR SUMAS
  /*int a, b;
  a = StrToInt(InputBox("** XXX VERANO XXX **", "* DIGITE UN NÚMERO: ", "0" ) );
  b = StrToInt(InputBox("** XXX VERANO XXX **", "* DIGITE OTRO NÚMERO: ", "0" ) );
  int prod = producto( a, b );
  ShowMessage( prod );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 4)
  /*float p, x, n;
  x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE POTENCIA: ", "0" ) );
  p = potencia( x, n );
  ShowMessage( p );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 5) MOSTRAR ELEMENTOS DEL VECTOR DE LAS CASILLAS PARES
  /*int v[ 5 ] = { 0, 1, 2, 3, 4 };
  int n = 5;
  String s;
  casillaPar( v, 5, s );
  ShowMessage( s );*/  // OK OK OK OK OK OK

  /*int v[ 50 ], i;
  int n;
  String s;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  casillaPar( v, n, s );
  EditMostrar->Text = EditMostrar->Text + "," +  s;*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 6) CANTIDAD QUE SE REPITE
  /*int v[ 5 ] = { 2, 3, 4, 5, 5 };
  int n = 5;
  int x = 5, c;
  c = cantRepite( v, n, x );
  ShowMessage( c );*/  //OK OK OK OK OK OK

  /*int v[ 50 ], i;
  int n, x;
  int a, c;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  x = StrToInt( InputBox( "VEXXXTOR", "* DIGITE UN NÚMERO: ", "0" ) );
  c = cantRepite( v, n, x );
  EditMostrar->Text = EditMostrar->Text + IntToStr( c );*/  // OK OK OK OK OK OK

  /*int x = StrToInt(InputBox( "** XXX VERANO XXX **","* DIGITE UN NÚMERO: ","0" ) );
  int c = contar( Vextor, Vextor->ColCount, x );
  ShowMessage( x );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 7)
/*int v1[ 3 ] = { 1, 2, 3 };
  int n = 3;
  int v2[ 3 ] = { 4, 5, 6 };
  int m = 3;
  int prod = proEscalar( v1, v2, n );
  ShowMessage( prod );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 8)
    /*String s = EditMostrar->Text;
    s = InputBox( "CADENAXXX","* DIGITE UNA CADENA :", "hola" );
    if ( esPalindrome( s ) )
      ShowMessage("TRUE");
    else
      ShowMessage("FALSE");*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 10)
  /*int M, N;
  M = StrToInt(InputBox("** XXX VERANO XXX **", "* DIGITE UN NÚMERO: ", "0" ) );
  N = StrToInt(InputBox("** XXX VERANO XXX **", "* DIGITE OTRO NÚMERO: ", "0" ) );
  int res = ackerman(M,N);
  ShowMessage( res );*/ //OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 11)

//ShowMessage(sumMayUlt(Vextor,Vextor->ColCount));//  // OK OK OK OK OK OK

  /*int v[ 50 ], i;
  int n, sum;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  sum = sumMayUlt( v, n);
  EditMostrar->Text = EditMostrar->Text +IntToStr( sum );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 12)
  /*int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "** VERANO **", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "** VERANO **", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  OrdenBurbuVer( n, v );
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text + "-" + IntToStr( v[ i ] );
  }*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
// 14)
/*int v[] = { 8, 4, 2, 5, 6, 1, 3, 9 };
  Word n = 8;
  int t = posMayor( v, n );
  ShowMessage( t );
  selection( v, t );
  for( int i = 0; i < n; i++ ) {
    ShowMessage( v[ i ] );  // OK OK OK OK OK OK
  }*/
//------------------------------------------------------------------------------
// 15)
  /*int a,b,v[ 7 ] = { 1, 3, 5, 8, 9, 10, 6 };
  int n = 7;
  MergeSort( v, a, b );
  ShowMessage( "[" + VecToStr( v, n ) + "]" );*/ //malllllllllllllllllllllllllllll







///**************************************************************************///
///*******************************   CADENAS   ******************************///
///**************************************************************************///

//------------------------------------------------------------------------------
    /*String s = "Homero raro";
    ShowMessage(palExt(s));*/  //OK

    /*String s=EditMostrar->Text;
    s = ( InputBox("CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    palExt( s );  //MUESTRA LA PALABRA MAS LARGA DE UNA CADENA  ojoooooooooooooo
    EditMostrar->Text = EditMostrar->Text+(s);*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
   /* int v[5]={9,2,3,4,5};
    int max,min;    mallllllllllllllllllllllllllll
    MaxMin(v,max,min,5);
    ShowMessage(IntToStr(max)+"/"+IntToStr(min));  */
//------------------------------------------------------------------------------
    /*String s = "adf dba bfei";
    ElimVoc(s);
    ShowMessage(s);*/  //OK

    /*String s=EditMostrar->Text;
    s = ( InputBox("CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    ElimVoc(s);  //ELIMINA LAS VOCALES DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text+(s);*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s = "hola a todos";
    String s1,s2;
    separaVocCon(s,s1,s2);
    ShowMessage(s1+"-"+s2);*/  //OK

    /*String s,s1,s2=EditMostrar->Text;
    s = ( InputBox("CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    separaVocCon(s,s1,s2);  //SAPARA LAS VOCALES DE LAS CONSONANTES DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text+(s1+"-"+s2);*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s = "hola a todos";
    invertirCad(s);
    ShowMessage(s);*/  //OK

    /*String s=EditMostrar->Text;
    s = ( InputBox("CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    invertirCad( s );  //INVERTIR UNA CADENA
    EditMostrar->Text = EditMostrar->Text+(s);*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s="hola a todos";
    ShowMessage(contVocales(s));*/  //OK

    /*String s="hola a todos";
    int a=contVocales(s);
    ShowMessage(a);  */

    /*String s = EditMostrar->Text;
    s = ( InputBox( "CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    int x = contVocales( s );  //CONTAR LA VOCALES DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text + ( x );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s = "ddsdsffgsdf";
    ElimCar(s,'d');
    ShowMessage(s);*/  //OK

    /*String s=EditMostrar->Text;
    s = ( InputBox("CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    ElimCar(s,'a');  //ELIMINAR UN CARACTER DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text+(s);*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s  = "ddsf sfvdfg dfbh";
    ElimEsp(s);
    ShowMessage(s);*/ //OK

    /*String s=EditMostrar->Text;
    s = ( InputBox( "CADENAXXX", "* DIGITE UNA CADENA :", "" ) );
    ElimEsp( s );  //ELIMINAR LOS ESPACIOS DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text + ( s );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s="hola asd";
    ShowMessage(contarPal(s));*/  //OK

    /*String s = EditMostrar->Text;
    s = ( InputBox( "CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    int x = contarPal( s );  //CONTAR LAS PALABRAS DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text + ( x );*/ //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    //CONTAR VOCALES CONSONANTES.......
    /*String s="hola amigos ed hoy";
    int d=contVocCon(s);
    ShowMessage(d);*/

    /*String s = EditMostrar->Text;
    s = ( InputBox( "CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    int x = contVocCon( s );  //CONTAR CUANTAS VOCALES-CONSONANTES HAY DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text + ( x );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
    /*String s="hola a todos";
    ShowMessage(contarPalabras(s));*/  //OK

    /*String s="hola a todas las amigas de alan";
    int a=contarPalabras(s);
    ShowMessage(a);*/  //OK

    /*String s = EditMostrar->Text;
    s = ( InputBox( "CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    int x = contPalabras( s );  //CONTAR LA CANTIDAD DE PALABRAS QUE TENGAN LA LETRA 'A'
    EditMostrar->Text = EditMostrar->Text + ( x );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------
   /*if(esta("holopoto"))
     ShowMessage("está");
   else                 // SE ENCUANTRA LA LETRA 'A' EN LA CADENA
     ShowMessage("No Está");*/  //OK
//------------------------------------------------------------------------------
    /*String s=EditMostrar->Text;
    s = ( InputBox("CADENAXXX","* DIGITE UNA CADENA :", "" ) );
    elimVocales( s );  //ELIMINAR LAS VOCALES DE UNA CADENA
    EditMostrar->Text = EditMostrar->Text+( s );*/  //OK OK OK OK OK OK
//------------------------------------------------------------------------------

///**************************************************************************///
///*******************************  NATURALES  ******************************///
///**************************************************************************///

//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  Mostrar( n );*/  // 1) MOSTRAR N PRIMEROS NATURALES  OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  Mostrar1( n );*/  // 2) MOSTRAR N PRIMEROS NATURALES INVERSOS  OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  MostrarPares( n );*/  // 3) MOSTRAR N PRIMEROS NUMEROS PARES  OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  EliminarPares( x );  // 4) ELIMINA LOS DIGITOS PARES DE UN NRO  OK OK OK OK OK OK
  ShowMessage( x );*/
//------------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( SumaDigitosPares( x ) );*/  // 5) MOSTRAR SUMA DE DIGITOS PARES DE UN NRO  OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( CantidadPar( x ) );*/  // 6) MOSTRAR CANTIDAD DE DIGITOS PARES DE UN NRO OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  MostrarImpares( n );*/  // 7) MOSTRAR N PRIMEROS NUMEROS IMPARES  OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*Cardinal n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( SumaDigitos( n ) );*/  // 11) MOSTRAR SUMA DE LOS DIGITOS  OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*Cardinal x, p, i;
  x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  Sep_Imp_Par( p, i, x );  // 12) SEPARA LOS DIGITOS PARES E IMPARES DE UN NRO  OK OK OK OK OK OK
  ShowMessage( " [ " +IntToStr( p ) +'|'+ IntToStr( i ) + " ] " );*/
//------------------------------------------------------------------------------
  /*Cardinal x,y,z;  malllllllllllllllllllllllllllllllllllllllllllllllllllllll
  x = 3745;
  y  = 1234;
  SepararParImpar( z, x, y );  // 8) SEPARA LOS DIGITOS PARES E IMPARES DE DOS NRO
  ShowMessage( " [ " +IntToStr( x ) +'|'+ IntToStr( y ) + " ] " );  */
//------------------------------------------------------------------------------
  /*Cardinal x, y, z;
  x = StrToInt(InputBox("** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  y = StrToInt(InputBox("** NÚMEROS NATURALES **", "* DIGITE OTRO NÚMERO: ", "0" ) );
  juntar( x, y, z );  // 15) JUNTAR LOS DIGITOS DE 2 NÚMEROS EN UNO SOLO OK OK OK OK OK OK
  ShowMessage( z );*/
//------------------------------------------------------------------------------
  /*Cardinal z;  //malllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
  z = 98713;
  Ordenar( z );  // 16) ORDENAR DIGITOS DE UN NRO
  ShowMessage( z );*/
//------------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( MenorDigito( x ) );*/  // 17) MOSTRAR EL MENOR DIGITO DE UN NRO
  //8451962  MAAAAAAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
//---------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  x = Fibo( x );  // 20)MUESTRA EL N-ÉSIMO TÉRMINO DE LA SERIE FIBONACCI OK OK OK OK OK OK
  ShowMessage( x );*/
//------------------------------------------------------------------------------
  /*float p, x, n;
  x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE POTENCIA: ", "0" ) );
  p = Potencia( x, n );  // 21)ELEVA UN NRO X A LA N  OK OK OK OK OK OK
  ShowMessage( p );*/
//------------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  if ( EsPar( x ) )  // 22) PROGRAMA QUE DEVUELVE TRUE SI UN NÚMERO ES PAR OK OK OK OK OK OK
    ShowMessage( "ES PAR" );
  else
    ShowMessage( "NO ES PAR" );*/
//------------------------------------------------------------------------------
  /*Word x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  MostrarHola( x );*/  // 23) MOSTRAR N VECES HOLA Y UN CHAU OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( Factorial( n ) );*/  // 24) MUESTRA EL FACTORIAL DE UN NÚMERO OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( Nesimo( n ) );*/ // 25) MUESTRA EL N-ÉSIMO TÉRMINO DE UNA SERIE OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( GenerarSerie( n ) );*/  // 26) MUESTRA EL N-ÉSIMO TÉRMINO DE UNA SERIE OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*byte n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( SumaSerie( n ) );*/  // 27) MUESTRA LA SUMA DE UNA SERIE OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*Cardinal x = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( SepararDigito( x ) );*/  // 28) PROGRAMA QUE SEPARA LOS DÍGITOS DE UN NÚMERO OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*int n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( SumaN( n ) );*/  // 29) PROGRAMA QUE SEPARA LA SUMA DE UNA SERIE OK OK OK OK OK OK














  /*int n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( Pro1( n ) );*/  // ) Pro1  OK OK OK OK OK OK

  /*int n = StrToInt( InputBox( "** NÚMEROS NATURALES **", "* DIGITE UN NÚMERO: ", "0" ) );
  ShowMessage( Pro2( n ) );*/  // ) Pro2  OK OK OK OK OK OK


  /*int v[ 50 ], i;
  int n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }    // ) Pro3 //
  EditMostrar->Text = IntToStr( Pro3( v, n ) );*/  // OJO: INFINITOOOOOOOOOOOOOOOO



  /*int v[ 50 ], i;
  int n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }    // ) Pro4 //
  EditMostrar->Text = IntToStr( Pro4( v, n ) );*/ // OK OK OK OK OK OK

//------------------------------------------------------------------------------

///**************************************************************************///
///*******************************  VECTORES  *******************************///
///**************************************************************************///

//------------------------------------------------------------------------------
/*int x,v[7]={2,5,6,8,6,1,10};
  byte z = 7;
  x = SumaV( v, z );    // 13)MUESTRA LA SUMA DE LOS ELEMENTOS DE UN VECTOR //
  ShowMessage( x );*/  //OK
//------------------------------------------------------------------------------
  /*int x,v[7]={3,5,6,8,6,1,1};
  byte z = 7;
  x = SumaImpares( v, 7 );  // 14)MUESTRA LA SUMA DE LOS ELEMENTOS IMPARES DE UN VECTOR //
  ShowMessage( x );*/      //OK
//------------------------------------------------------------------------------
  /*int x,v[7]={3,7,14,5,2,16,15};
  Word n = 7;
  x = sumParImp( v, n );  // X)MUESTRA LA SUMA DE LOS ELEMENTOS PARES CON IMPARES DE UN VECTOR //
  ShowMessage( x );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------

  /*int v[7]={3,7,14,5,2,16,15};
  short n = 7;
  int v1[8]={1,2,3,4,5,6,7,9};
  short m = 8;
  intercambiar( v, v1, n, m );
  ShowMessage( "[" + VecToStr( v, n) + "]" );
  ShowMessage( "[" + VecToStr( v1,m) + "]" );*/




  /*int v[5]={1,2,3,4,5};
  int n = 5;
  float x;
  x = promedio( v, n );  // 15)MUESTRA EL PROMEDIO DE LOS ELEMENTOS DE UN VECTOR //
  ShowMessage( x );*/

  /*int v[ 50 ], i;
  int n, x;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( " EJERCICIO DE VERANO ", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( " EJERCICIO DE VERANO ", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }    // ) PROMEDIO DE LOS DÍGITOS DE UN VECTOR //
  x = promedio( v, n );
  EditMostrar->Text = IntToStr( x );*/  // OK OK OK OK OK OK




  /*int v[4]={3,7,14,5};
  int n = 4;
  int v1[4]={1,2,8,4};
  int m = 4;
  int vx[ 50 ] = { 50 };
  int k = 50;
  concatenar( v, v1, n, m, vx, k );
  ShowMessage( "[" + VecToStr2( v, v1, n, m ) + "]" );*/ // OK OK OK OK OK OK


  /*int v[4]={3,7,14,5};
  int n = 4;
  int v1[3]={1,2,8};
  int m = 4;
  int vx[ 50 ] = { 50 };
  int k = 50;
  prodCartesiano( v, v1, n, m, vx );
  //concatenar( v, v1, n, m, vx, k );
  ShowMessage( "[" + VecToStr2( v, v1, n, m ) + "]" );*/


  /*int x, v[ 6 ] = { 1, 2, 3, 4, 5, 5 };
  short n = 6;
  if ( repetidos( v, n ) )                        // 24)BUSQUEDA BINARIA //
    ShowMessage( "SI HAY DOS NÚMEROS REPETIDOS =)" );
  else                                             // OK
    ShowMessage( "NO HAY DOS NÚMEORS REPETIDOS =(" );*/



  /*int v[7]={3,7,9,5,2,10,8};
  int n = 7;
  int x;
  x = prodMaxMin( v, n );
  ShowMessage( x );*/ //OK OK OK OK OK OK

  /*int v[ 50 ], i;
  int n,x;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }    // ) PRODUCTO DEL VALOR MAXIMO POR EL MINIMO //
  x = prodMaxMin( v, n );
  EditMostrar->Text = IntToStr( x );*/ // OK OK OK OK OK OK



  /*int v[ 3 ] = { 1, 1, 1 };
  int n = 3;
  int v1[ 3 ] = { 0, 1, 0 };
  int m = 3;
  int x;
  x = hamming( v, v1, n, m ); // OK OK OK OK OK OK
  ShowMessage( x );*/



//------------------------------------------------------------------------------
  /*int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }    // 32)MUESTRA LA SUMA DE LOS ELEMENTOS PARES DE UN VECTOR //
  EditMostrar->Text = IntToStr( sumaPares( v, n ) );*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*int v[7]={2,6,8,16,7,1,1};
  int z = 7;
  float x;
  x = PromedioV( v, z );  // 15)MUESTRA EL PROMEDIO DE LOS ELEMENTOS DE UN VECTOR //
  ShowMessage( x );*/    //OK
//------------------------------------------------------------------------------
  /*int v[7]={3,7,4,5,1,13,2};
  Rotar(v,7);       // 16)ROTAR UNA CASILLA A LA DERECHA ELEMENTOS DEL VECTOR //
  ShowMessage( "[" + VecToStr( v, 7 ) + "]" );*/ //OK OK OK OK OK OK

  //rotarDer( Vextor, Vextor->ColCount );  // OK OK OK OK OK OK

  // rotarIzq1( Vextor, Vextor->ColCount );  // OK OK OK OK OK OK

  /*int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text =  Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  //Rotar( v, n );  // 16)ROTAR UNA CASILLA A LA DERECHA ELEMENTOS DEL VECTOR //
  rotarIzq( v, n );// xxxxx)ROTAR UNA CASILLA A LA IZQUIERDA ELEMENTOS DEL VECTOR //
  EditMostrar->Text = ( "[" + VecToStr( v, n ) + "]" );*/   //OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*int v[ 7 ] = { 1, 3, 5, 8, 9, 10, 6 };
  InsertarX(v,7);                               // 16.1)INSERTAR UN ELEMENTO A SU LUGAR //
  ShowMessage( "[" + VecToStr( v, 7 ) + "]" );*/ //OK
//------------------------------------------------------------------------------
  /*int x,v[10]={2,8,-5,10,15,4,6,9,2,7};
  short int n = 1;
  x = Mayor( v, 4 );  // 17)MUESTRA EL MAYOR DE LOS ELEMENTOS DE UN VECTOR //
  ShowMessage( x );*/
//------------------------------------------------------------------------------
  /*int v[ 7 ] = { 5, 7, 1, 4, 6, 3, 2 };
  InsertionSort(v,7);  // 17.1)ORDENAR LOS ELEMENTOS DEL VECTOR POR BARAJA //
  ShowMessage( VecToStr( v, 7 ) );*/  //OJO SALE STACK OVERFLOW
//------------------------------------------------------------------------------
  /*int x,v[6]={7,3,1,5,3,2};
  int n = 6;
  EliminarElemento( v, n, 3 );                    // 18)ELIMINA UN ELEMENTO DEL VECTOR //
  ShowMessage( "[" + VecToStr( v, n )+ "]" );*/ //OK OK OK OK OK OK

  /*int v[ 50 ], i;
  int n, x;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  x = StrToInt( InputBox( "VEXXXTOR", "* DIGITE NÚMERO A ELIMINAR: ", "0" ) );
  EliminarElemento( v, n, x );    // eliminar dato //
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text +","+IntToStr( v[ i ] );
  }*/  // OK OK OK OK OK OK

  /*int x;
  x = StrToInt( InputBox( "VEXXXTOR", "* DIGITE NÚMERO A ELIMINAR: ", "0" ) );
  elimDato( Vextor, Vextor->ColCount, x );*/  //MALLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
//------------------------------------------------------------------------------
  /*int v[7]={7,4,1,8,5,3,6};
  Burbu( v, 7 );  // 19)LLEVA EL MAYOR DIGITO A LA ÚLTIMA CASILLA DEL VECTOR //
  ShowMessage( VecToStr( v, 7 ) );*/  //OK OK OK OK OK OK

  //burbujita( Vextor, Vextor->ColCount ); //mallllllllllllllllllllllllllll

//------------------------------------------------------------------------------
  /*bool v[6]={7,1,5,8,6,4};
  Ordenar( v, 6 )  // 20)VERIFICA SI LOS ELEMENTOS DEL VECTOR ESTÁ ORDENADO//
  ShowMessage( VecToStr( v, 6 ) );  */
//------------------------------------------------------------------------------
 /*int v[6]={1,3,8,9,10,7};
  short n = 6;
  Invertir( v, n );                             // 23)INVERTIR LOS ELEMENTOS DE UN VECTOR //
  ShowMessage( "[" + VecToStr( v, n ) + "]" );*/ //OK
//------------------------------------------------------------------------------
  /*int x, v[ 12 ] = {1, 2, 4, 6, 9, 10, 11, 12, 20, 30, 31, 35 };
  short n = 12;
  if ( BusBin( v, n, 10 ) )                        // 24)BUSQUEDA BINARIA //
    ShowMessage( "SE ENCUENTRA EL VALOR =)" );
  else                                             // OK
    ShowMessage( "NO SE ENCUENTRA EL VALOR =(" );*/
//------------------------------------------------------------------------------
  /*int v[ 8 ] = {4, 1, 5, 8, 6, 3, 2, 9 };
  Word n = 8;
  if ( EstaAntes( v, n, 3, 5 ) )                 // 26)ESTÁ ANTES X DE Y EN UN VECTOR //
    ShowMessage( "SE ENCUENTRA ANTES =)" );
  else                                          // OK
    ShowMessage( "NO SE ENCUENTRA ANTES =(" );*/
//------------------------------------------------------------------------------
  /*int x, v[ 12 ] = {1, 2, 4, 6, 9, 10, 11, 12, 20, 30, 31, 35 };
  Cardinal n = 12;
  if ( EstaOrdenado( v, n ) )                  // 9.1)ESTA ORDENADO EL VECTOR DE MENOR A MAYOR //
    ShowMessage( "SE ENCUENTRA ORDENADO =)" );
  else                                         // OK
    ShowMessage( "NO SE ENCUENTRA ORDENADO =(" ); */
//------------------------------------------------------------------------------
  /*int x, v[ 7 ] = { 7,5,4,15,2,2,0, };
  Cardinal n = 7;
  if ( EstaOrdenado1( v, n ) )                  // 9.2)ESTA ORDENADO EL VECTOR DE MAYOR A MENOR //
    ShowMessage( "SE ENCUENTRA ORDENADO =)" );
  else                                         // OK
    ShowMessage( "NO SE ENCUENTRA ORDENADO =(" );*/
//------------------------------------------------------------------------------
  /*int v[ 5 ] = { 9, 8, 10, 2, 3 };
  Word n = 5;
  P(v,n);
  ShowMessage( "[" + VecToStr( v, n ) + "]" );*/ //OK
//------------------------------------------------------------------------------
  /*int v[ 8 ] = { 8 };
  Word n = 8;
  CargarFibo(v,n);
  ShowMessage( "[" + VecToStr( v, n ) + "]" );*/ //OK
//------------------------------------------------------------------------------
  /*int v[7]={3,7,1,4,2,9,5};
  int x=7;
  ShowMessage(sumaPosPares(v,x));*/  // maaaaaaaaaaaaaalllllllllllllllllllllllll
//------------------------------------------------------------------------------
  /*int v[ 7 ] = { 7,5,4,15,2,2,0, };
  int n = 3;
  int m = 1;
  if ( EstaOrdenadovector( v, n, m ) )   // 9.2)ESTA ORDENADO EL VECTOR DE MAYOR A MENOR //
    ShowMessage( "ESTÁ ORDENADO  "  + IntToStr( m ) );
  else                                         // OK  OJOOOOOOOOOOO
    ShowMessage( "NO ESTÁ ORDENADO  " + IntToStr( m ) );*/
//------------------------------------------------------------------------------
  /*int v[6]={1,3,8,9,10,7};
  int n = 6;                        //ojooooooooooooooooooooooooooooooooooooooooo
  int Max,Min;
  MaxMin(v,n,Max,Min);                     // 23)MAX & MIN ELEMENTO DE UN VECTOR //
  ShowMessage( "[" + VecToStr( v, n ) + "]" );*/ //OK
//------------------------------------------------------------------------------
   /*int a,b;
   int n = V1.GetDimension();
   V1.MaxMin(n,a,b);                //ojoooo este es el ejemplo de llamada
   Edit2->Text = StrToInt(a);
   Edit3->Text = StrToInt(b);*/
//------------------------------------------------------------------------------
  /*int v[ 10 ] = { 0, 9, 3, 6, 7, 4, 5, 1, 13, 2 };
  sepParImp( v, 10 );    // )SEPARAR LOS DIGITOS PARES E IMPARES DEL VECTOR //
  ShowMessage( "[" + VecToStr( v, 10 ) + "]" );*/  //OK OK OK OK OK OK

  /*int v[ 50 ], i;
  Word n;
  Edit1->Clear( );
  EditMostrar->Clear( );
  Edit2->Clear( );
  n = StrToInt( InputBox( "VEXXXTOR", "* DIGITE DIMENSIÓN: ", "0" ) );
  for ( i = 0; i < n; i++ ) {
    v[ i ] = StrToInt( InputBox( "VEXXXTOR", "* VALOR: ", "0" ) );
    Edit1->Text = Edit1->Text + "-" + IntToStr( v[ i ] );
  }
  sepParImp( v, n );    // )SEPARAR LOS DIGITOS PARES E IMPARES DEL VECTOR //
  for ( i = 0; i < n; i++ ) {
    EditMostrar->Text = EditMostrar->Text +","+IntToStr( v[ i ] );
  }*/  // OK OK OK OK OK OK
//------------------------------------------------------------------------------
  /*int x, v[ 11 ] = { 3,7,1,4,2,9,5,  9,8,7,6};
  int z = 7;
  x = sumaPosPares( v, z ); // )MUESTRA LA SUMA DE LAS POSICIONES PARES DE ELEMENTOS DE UN VECTOR //
  ShowMessage( x );*/   //OK OK OK OK OK OK

}

//------------------------------------------------------------------------------

///**************************************************************************///
///*******************************  MATRICES  *******************************///
///**************************************************************************///

//------------------------------------------------------------------------------
void __fastcall TForm1::BTNCARGAMATRICESClick( TObject *Sender ) {
  /*int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE FILAS: ", "0" ) );
  int n = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE COLUMNAS: ", "0" ) );
  Matrix->ColCount = n;
  Matrix->RowCount = m;
  magicVer( Matrix, m, m, 0, m / 2, 1 );*/ // OK OK OK OK OK OK DE VERANO # 22


  //matrixFila( Matrix, m, n );  // OK OK OK OK OK OK DE VERANO # 18
  //triSupIzq(Matrix);  // OK OK OK OK OK OK
  //llenar8_1(Matrix);  // OK OK OK OK OK OK
  //llenar8(Matrix,0,0,1);  // OK OK OK OK OK OK
  //triSupDer(Matrix);
  //llenarMatrix4(Matrix, 0, 0, 1 );
   //matrixColumna( Matrix, m, n );  // OK OK OK OK OK OK DE VERANO # 19  ojooooooooooooooooooo
  //magico2(Matrix,m,0,0,1);
  //llenarMatrix5(Matrix, m, n, 1 );
  //ordenCol(Matrix);
}
//------------------------------------------------------------------------------

void __fastcall TForm1::BtnMagicoClick( TObject *Sender ) {
  //short m, n;
  //m = StrToInt( InputBox( "MATRIXXX", "* DIGITE DIMENSIÓN: ", "0" ) );
  //Matrix->ColCount = m;
  //Matrix->RowCount = m;

}






//---------------------------------------------------------------------------

void __fastcall TForm1::magico1Click(TObject *Sender) {
  short m, n;
  m = StrToInt( InputBox( "MATRIXXX", "* DIGITE DIMENSIÓN: ", "0" ) );
  Matrix->ColCount = m;
  Matrix->RowCount = m;
  Magico( Matrix, m, m, 0, m / 2, 1 ); //OK OK OK OK OK OK
}

//---------------------------------------------------------------------------

void __fastcall TForm1::llenarAlRevesClick(TObject *Sender) {
  int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE FILAS: ", "0" ) );
  int n = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE COLUMNAS: ", "0" ) );

  int f = m-1;
  int c = n-1;

  Matrix->ColCount = n;
  Matrix->RowCount = m;
  llenarReves( Matrix, m, n, f, c );  //OK OK OK OK OK OK
}
//---------------------------------------------------------------------------

void __fastcall TForm1::llenar1Click(TObject *Sender) {
  int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE FILAS: ", "0" ) );
  int n = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE COLUMNAS: ", "0" ) );
  Matrix->ColCount = n;
  Matrix->RowCount = m;
  LlenarMatriz1( Matrix, m, n );  //OK OK OK OK OK OK
}
//---------------------------------------------------------------------------

void __fastcall TForm1::magicox2Click(TObject *Sender) {
  int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE DIMENSIÓN: ", "0" ) );

  int f = m - 1;
  int c = m / 2;

  Matrix->ColCount = m;
  Matrix->RowCount = m;
  magico2( Matrix, m, f, c, m * m );  //OK OK OK OK OK OK
}
//---------------------------------------------------------------------------

void __fastcall TForm1::matrizAuxClick(TObject *Sender) {
  int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE DIMENSIÓN: ", "0" ) );
  int f = 0;
  int c = m - 1;
  int dato = limiteM( m );
  matriztri( Matrix, m, f, c, dato );  //OK OK OK OK OK OK
}
//---------------------------------------------------------------------------

void __fastcall TForm1::matrizElementalClick(TObject *Sender) {
  int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE DIMENSIÓN: ", "0" ) );
  int f = m - 1;
  int c = m - 1;
  espiral( Matrix , m , f , c , m*m );  //OK OK OK OK OK OK
}
//---------------------------------------------------------------------------

void __fastcall TForm1::estaOrdenMatrizClick(TObject *Sender) {

  /*int m = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE FILAS: ", "0" ) );
  int n = StrToInt( InputBox( "MATRIXXX", "* DIGITE NRO DE COLUMNAS: ", "0" ) );
  Matrix->ColCount = n;
  Matrix->RowCount = m;
  LlenarMatriz1( Matrix, m, n );*/


   /*int f = m;
   int c = n;

   if ( estaOrdenada( Matrix , m , n , f ,c ) )
     ShowMessage ("true");
   else
     ShowMessage ("false");*/
}






//---------------------------------------------------------------------------


void __fastcall TForm1::BTNCARGAVECTORESClick(TObject *Sender) {
  Word i, n ;
  n = StrToInt( InputBox( "VEXXXTOR", "* INGRESE DIMENSIÓN: ", "0" ) );
  Vextor->ColCount = n;
  Randomize( );
  for ( i = 0; i < n; i++ ) {
    Vextor->Cells[ i ][ 0 ] = random( 20 );
  }
}

void __fastcall TForm1::Par_ImpClick(TObject *Sender)
{
        Cardinal p = 0, i = 0;
        Cardinal n = StrToInt(InputBox("","cvjyuht",""));
        Sep_Imp_Par(p,i,n);
        ShowMessage(p);

        ShowMessage(i);
}
//   -------------------------------------------------------------------------



void __fastcall TForm1::Button1Click(TObject *Sender)
{
        Cardinal n =StrToInt(InputBox("hola","como","estas"));
        elimImpares(n);
        ShowMessage(n);
}